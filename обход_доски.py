import gui
import time


def get_figure_movements(фигура):
    возможные_движения = []

    if  фигура == 'король':
        возможные_движения = [(1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1)]

    if  фигура == 'конь':
        возможные_движения = [(1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2)]

    if  фигура == 'ладья':
        for i in range(1, 8):
            if i != 0:
                возможные_движения.append((i, 0))
                возможные_движения.append((-i, 0))
                возможные_движения.append((0, i))
                возможные_движения.append((0, -i))

    if  фигура == 'ферзь':
        for i in range(1, 8):
            возможные_движения.append((i, 0))
            возможные_движения.append((-i, 0))
            возможные_движения.append((0, i))
            возможные_движения.append((0, -i))
            возможные_движения.append((-i, -i))
            возможные_движения.append((i, -i))
            возможные_движения.append((i, i))
            возможные_движения.append((-i, i))

    return возможные_движения


def board_traversal(волны, номер_волны, множество_достижимых_клеток, debug = True):
    if debug:
        print('Номер волны: {}\tРасставлено клеток: {}'.format(номер_волны, len(множество_достижимых_клеток)))

    if len(множество_достижимых_клеток) == 64:
        # все! нашли путь. новый виток рекурсии не делаем
        return волны

    # куда может походить фигура
    теоретически_возможные_движения = get_figure_movements(gui.get_selected_figure())


    # будем рассчитывать для каждой волны новые клетки, куда может добраться фигура
    номер_волны += 1

    волны[номер_волны] = []

    for x, y in волны[номер_волны - 1]:
        for смещение_x, смещение_y in теоретически_возможные_движения:
            потенциально_достижимая_клетка = x + смещение_x, y + смещение_y

            if 1 <= потенциально_достижимая_клетка[0] <= 8 and 1 <= потенциально_достижимая_клетка[1] <= 8:
                if потенциально_достижимая_клетка not in множество_достижимых_клеток:
                    # добавляем новую клетку. она прошла двойной скрининг)
                    if потенциально_достижимая_клетка not in волны[номер_волны]:
                        волны[номер_волны].append(потенциально_достижимая_клетка)
                        множество_достижимых_клеток.add(потенциально_достижимая_клетка)

                        # gui.highlight_cell(*потенциально_достижимая_клетка, 'yellow', kind='dot')
                        gui.draw_arrow(x, y, *потенциально_достижимая_клетка, 'lightgray')
                        gui.draw_text(*потенциально_достижимая_клетка, len(множество_достижимых_клеток))
                        time.sleep(gui.get_delay())

                        board_traversal(волны, номер_волны, множество_достижимых_клеток, debug=False)
                        # if путь != None:
                        #     #путь найден. сворачиваем рекурсию
                        #     return путь


    # if debug:
    #     print("Волна {}\n\tновые клетки {}\n\tмножество достижимых клеток {}".format(номер_волны, волны[номер_волны], множество_достижимых_клеток))
    #
    if len(волны[номер_волны]) == 0:
        del волны[номер_волны]
        номер_волны -= 1

        тупиковая_клетка = волны[номер_волны][0]
        предыдущая_клетка = волны[номер_волны - 1][0]
        gui.remove_text(*тупиковая_клетка)
        gui.remove_arrow(*предыдущая_клетка, *тупиковая_клетка)

        множество_достижимых_клеток.remove(волны[номер_волны][0])
        del волны[номер_волны][0]
    # return None



def btn_click(event):
    try:
        start_time = time.time()

        gui.кнопка_расчитать.unbind('<Button-1>')
        gui.clear_board()

        # откуда стартуем
        x0, y0 = 1, 1
        номер_волны = 0

        # словарь будет хранить список клеток, до которых фигура сможет дойти на i-ом шаге
        волны = {0: set([(x0, y0)])}

        # множество всех клеток, до которых можно добраться
        множество_достижимых_клеток = set([(x0, y0)])

        gui.highlight_cell(x0, y0, "yellow")

        board_traversal(волны, номер_волны, множество_достижимых_клеток, debug = False)
        print("Нахождение пути для фигуры {} окончено! Потрачено времени: {}".format(gui.get_selected_figure(), time.time() - start_time))

        gui.кнопка_расчитать.bind('<Button-1>', btn_click)
    except:
        pass


if __name__ == '__main__':
    # рисуем доску
    gui.размер_доски = 600
    gui.init_gui(info_panel = True)
    gui.draw_board()

    gui.кнопка_расчитать.bind('<Button-1>', btn_click)

    gui.окно.mainloop()

