import gui
import time
import random


def get_figure_movements(фигура):
    возможные_движения = []

    if  фигура == 'король':
        возможные_движения = [(1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1)]

    if  фигура == 'конь':
        возможные_движения = [(1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2)]

    if  фигура == 'ладья':
        for i in range(1, 8):
            if i != 0:
                возможные_движения.append((i, 0))
                возможные_движения.append((-i, 0))
                возможные_движения.append((0, i))
                возможные_движения.append((0, -i))

    if  фигура == 'ферзь':
        for i in range(1, 8):
            возможные_движения.append((i, 0))
            возможные_движения.append((-i, 0))
            возможные_движения.append((0, i))
            возможные_движения.append((0, -i))
            возможные_движения.append((-i, -i))
            возможные_движения.append((i, -i))
            возможные_движения.append((i, i))
            возможные_движения.append((-i, i))

    return возможные_движения


def get_path(debug = True):
    #очищаем доску. убираем линии, кружки, сбрасываем цвет клеток в дефолтный
    gui.clear_board()

    # куда может походить фигура
    теоретически_возможные_движения = get_figure_movements(gui.get_selected_figure())

    # откуда стартуем
    x0, y0 = 1, 1
    # куда хотим придти
    xn, yn = 7, 8

    # словарь будет хранить список клеток, до которых фигура сможет дойти на i-ом шаге
    волны = {0: {'достижимые_клетки': [(x0, y0)], 'цвет': 'yellow'}}

    # множество всех клеток, до которых можно добраться
    множество_достижимых_клеток = set([(x0, y0)])
    gui.highlight_cell(x0, y0, "yellow")
    time.sleep(0.5)

    номер_волны = 0

    # цикл поиска пути. в начальный момент времени стоим в начальной точке
    while (xn, yn) not in множество_достижимых_клеток:
        # будем рассчитывать для каждой волны новые клетки, куда может добраться фигура
        номер_волны += 1
        # ...и помещать в словарь "волны"

        цвет_текущей_волны = '#' + ''.join([random.choice('0123456789abcdef') for i in range(6)])
        волны[номер_волны] = {'достижимые_клетки': set(), 'цвет': цвет_текущей_волны}

        for x, y in волны[номер_волны - 1]['достижимые_клетки']:
            for смещение_x, смещение_y in теоретически_возможные_движения:
                потенциально_достижимая_клетка = x + смещение_x, y + смещение_y

                if 1 <= потенциально_достижимая_клетка[0] <= 8 and 1 <= потенциально_достижимая_клетка[1] <= 8:
                    if потенциально_достижимая_клетка not in множество_достижимых_клеток:
                        # добавляем новую клетку. она прошла двойной скрининг)
                        if потенциально_достижимая_клетка not in волны[номер_волны]:
                            волны[номер_волны]['достижимые_клетки'].add(потенциально_достижимая_клетка)

                            gui.highlight_cell(*потенциально_достижимая_клетка, цвет_текущей_волны, kind='dot')
                            gui.draw_arrow(x, y, *потенциально_достижимая_клетка, волны[номер_волны - 1]['цвет'])
                            time.sleep(gui.get_delay())

        множество_достижимых_клеток |= волны[номер_волны]['достижимые_клетки']

        if debug:
            print("Волна {}\n\tновые клетки {}\n\tмножество достижимых клеток {}".format(номер_волны, волны[номер_волны], множество_достижимых_клеток))

    # все, добрались!
    # теперь восстановим последовательность ходов от конечной точки к начальной
    x, y = xn, yn
    # начинаем с последней
    последовательность_ходов = [(xn, yn)]
    while номер_волны >= 1:
        номер_волны -= 1

        for смещение_x, смещение_y in теоретически_возможные_движения:
            # дерево_ходов[(x, y)].append((x + смещение_x, y + смещение_y))
            потенциально_достижимая_клетка = x + смещение_x, y + смещение_y
            if потенциально_достижимая_клетка in волны[номер_волны]['достижимые_клетки']:
                break

        последовательность_ходов.append(потенциально_достижимая_клетка)
        gui.draw_arrow(x, y, *потенциально_достижимая_клетка, color=волны[номер_волны + 1]['цвет'], width=5)
        time.sleep(gui.get_delay())
        x, y = потенциально_достижимая_клетка

    if debug:
        print("---------------------------------------")
        print("Последовательность ходов: ", последовательность_ходов[::-1])


def btn_click(event):
    try:
        gui.кнопка_расчитать.unbind('<Button-1>')

        get_path(debug = True)
        gui.кнопка_расчитать.bind('<Button-1>', btn_click)
    except:
        pass


if __name__ == '__main__':
    # рисуем доску
    gui.размер_доски = 600
    gui.init_gui(info_panel = True)
    gui.draw_board(gui.цвет_фона_доски, "black")

    gui.кнопка_расчитать.bind('<Button-1>', btn_click)

    gui.окно.mainloop()

